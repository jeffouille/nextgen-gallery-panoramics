# Config Name: Default kmakemultires config file
# Description: NextGEN Gallery Panoramic krpano Default kmakemultires config file
# Author: Geoffroy Deleury
# Version: 1.00

# This is a config file that can be used with NextGEN Gallery Panoramic to create multires panoramic.
# More info in krpano.com
# Copy it before modifying it

# kmakemultires.config / kmakemultires config files documentation
# default config file for the kmakemultires tool
# krpano tools 1.0.8.14
#
#
# SETTINGS:
#
#
# general notes about file paths:
#
# - when defining a path for an output file it is possible to use
#   placeholders to refer to input file path or name:
#
# - the placeholder %INPUTPATH%:
#    * this is path of the current input file
#    * it can be used to generate the output at the location of the input file
#
# - the placeholder %BASENAME%:
#    * this is the 'basename' of a panorama image without path or extension
#    * cubeside pre- or suffixes are removed in the basename
#    * when generating a basename is not possible, then the name 'pano####' 
#      will be used, where '####' is a sequential number which starts at 0000.
#


# panotype
# - the panoramic type of the input image
# - possible settings:
#   - autodetect - the type will be detected by the imagesize / side-aspect
#      * 2:1 aspect = spherical pano
#      * 1:1 aspect and six files with the same 'basename' = cubical pano
#      * other aspects - ask the user
#   - sphere          - force assuming that the input is a full spherical 360x180 image
#   - cylinder        - force assuming that the input is a 360x* cylinder
#   - flat            - force assuming that the input is a flat image
#   - partialsphere   - force assuming that the input is a partial sphere   (hfov setting needed!)
#   - partialcylinder - force assuming that the input is a partial cylinder (hfov setting needed!)
#
panotype=partialsphere


# hfov / vfov / voffset
# - predefined settings for partial spherical/cylinder panos
# - hfov set the horizontal field of view of the image
# - the vfov value will/can be calculated automatically
# - voffset - vertical shift away from the horizon (+/- degrees)
#
hfov=360
vfov=auto
voffset=0


# converttocube
# - convert spherical images to cubical images (better viewing quality and better performance)
#
converttocube=true


# converttocubelimit
# - convert also 'partial' spherical (360x*) images to cubical ones
# - set the range what a partial pano need to achieve to be converted
# - works only when "converttocube" is also set to true
#
converttocubelimit=360x120


# converttocubeformat
# - image fileformat for the temporary cube files
# - possible settings:
#   - kro             = Kolor RAW (no limits, default)
#   - tif,tiff        = TIFF (max. filesize 4GB)
#   - btf,tf8,bigtiff = BigTIFF (no limits)
#   - psd             = Photoshop Document (max. imagesize 30000x30000)
#   - psb             = Photoshop Big Document (max. imagesize 300000x300000)
#   - jpg,jpeg        = JPEG (max. imagesize 30000x30000)
#
converttocubeformat=kro


# tempcubename
# - name template for the converttocubeformat temporary cube files
# - placeholders:
#     [FULLBASENAME] = full basename with path and name of the current pano (without extensions and placeholders)
#     [BASENAME]     = only the basename of the current pano (without path)
#     [UID]          = an internal unique id, should be used to avoid problems when two
#                      images with the same name were processed at the same time!
#
tempcubename=[FULLBASENAME]_tempcube[UID]



# buildmobileimages / buildmobileres
# - build additional smaller images for mobile phone web devices (e.g. iPhone3)
#
# - possible values: 
#     yes  = build the mobile images always 
#     no   = build never
#     auto = build only when the license "krpanoiphone.license.js" is available
#
# - mobilephoneres = the cubical pixel size for these images
#
buildmobileimages=yes
buildmobileres=512


# buildtabletimages / buildtabletres
# - build additional smaller images for tablet pc web devices (e.g. iPad)
#
# - possible values: 
#     yes  = build the images always 
#     no   = build never
#     auto = build only when the license "krpanoiphone.license.js" is available
#
# - buildtabletres = the cubical pixel size for these images
#
buildtabletimages=yes
buildtabletres=1024


# waitafterconvert
# - wait for an user keypress after converting to cube
# - this allows editing the cube faces before final processing
#
waitafterconvert=false


# makescenes
# - should the tool build a single xml with several scenes when passing 
#   several panos at once to the tool
# - this can be used for automatic building virtual tours
#
makescenes=false


# multires
# - should the tool build multi-resolution images
# - when set to false normal, single, non tiled images were build
#   
multires=true


# tilepath
# - path/name template for the output tiles
# - use the placeholder %INPUTPATH% for path of the input images
# - use the placeholder %BASENAME% for the basename of the panorama image
# 
# - tile placeholders (%l,%h,%v only when multires=true)
#    * %l  - index/number of the current level (1-n)
#    * %h  - horizontal index (indexbase-n)
#    * %v  - vertical index (indexbase-n)
#    * [c] - c = cubeside string (everything between '[' and ']' will be removed on other pano types)
#    * insert one or more '0' characters or a 'A' between the '%' and the 'l','h' or 'v' characters 
#      to 'fill up' the numbers with '0' characters (for uniform file names),
#      'A' = automatic - add as many '0' as needed, depending on the  highest value, e.g.:
#         %h   -> 1,2,3, ... 9,10,11, ...
#         %0h  -> 01,02,03, ... 09,10,11 ...
#         %00h -> 001,002,003, ... 009,010,011, ..
#         %Ah  -> 01,02,03, ... 09,10,11, ...
#      examples:
#         l%Al[_c]%Av_%Ah.jpg  =>  l1_01_01.jpg       (for sphere images)
#         l%Al[_c]%Av_%Ah.jpg  =>  l1_left_01_01.jpg  (for cube images)
# 
#    * note - for very large images organize the tiles in more folders to keep the
#      number of tiles/folder low for a better server performance,
#      tilepath example for very large images:
#         tilepath=%INPUTPATH%/%BASENAME%.tiles/l%Al/[c]/%Av/l%Al[_c]_%Av_%Ah.jpg
#
#tilepath=%INPUTPATH%/%BASENAME%.tiles/l%Al[_c]_%Av_%Ah.jpg
#tilepath=%INPUTPATH%/%BASENAME%.tiles/l%Al/[c]/%Av/l%Al[_c]_%Av_%Ah.jpg

# cubeshortsyntax (for 1.0.8.14 and newer)
# - use the shorter <cube url="pano_%s.jpg" /> syntax instead of
#   the <left url="pano_l.jpg" /> to <down url="_pano_d.jpg" /> syntax
#
cubeshortsyntax=true


# preview
# - generate a preview image
#
preview=true          


# cspreview
# - generate a cubestrip preview image
# - better quality for zenith/nadir views
# - better rendering performance
# - possible settings:
#   - true  => cubestrip preview image
#   - false => spherical preview image
#
cspreview=true


# graypreview
# - generate a grayscale preview image
# 
graypreview=false


# previewsmooth
# - smooth the preview image
# - 0 to 100 smoothness (higher values are smoother)
#
previewsmooth=25


# previewpath
# - path for the preview image
# - use the placeholder %INPUTPATH% for path of the input images
# - use the placeholder %BASENAME% for the basename of the panorama
#
#previewpath=%INPUTPATH%/%BASENAME%.tiles/preview.jpg


# makethumb / thumbsize (new)
# - generate a small thumbnail image
# - for makescene=true templates that use thumbnails
# - thumbsize - width/height in pixels
# - a image named "thumb.jpg" will be created in the tiles folder
# - and a "thumburl" attribute with the path of the thumb image 
#   will be added to the <scene> tag
#
makethumb=true
thumbsize=80


# tilesize
# - size of the image tiles
# - should be between 250 and 1500
# - use 'auto' to let the tool automatically find good sizes
#
tilesize=auto


# levels
# - number of multi-resolution levels to generate
# - use 'auto' to find automatically the best
# - the number of the automatic levels depends on the image size and on 'minsize' and 'maxsize' settings
#
levels=auto


# levelstep
# - each multi-resolution level will be reduced by 'levelstep' factor
# - default=2
#
# - examples: 
#    levelstep=2
#      level1=10000x5000
#      level2=5000x2500   (=10000/2, =5000/2)
#      level3=2500x1250   (=5000/2,  =2500/2)
#    levelstep=2.5
#      level1=10000x5000
#      level2=4000x2000   (=10000/2.5  =5000/2.5)
#      level3=1600x800    (=4000/2.5, =2000/2.5)		
#
levelstep=2


# leveldownload / leveldecode
# - set the download and decode settings for each level in the xml
# - when set to auto the automatic mode will be used and nothing will be in the xml
# - possible settings - auto,view,all
# - note - the setting 'all' can cause loading problems with big panos when not all tiles will fit in memory!
leveldownload=auto
leveldecode=auto


# progressiveloading
# - set the <image ... progressive="..."> setting in the xml
# - progressive loading means that the lower resolutions will be loaded  first
#   and the resolution by resolution (only for the current view) will be loaded
#   until the current resolution will be reached
# - without progressive loading the current resolution will be loaded at first
# 
# possible settings: true, false or auto
# - when set to auto - then the progressive loading will be enabled only for flat 
#   panos or large partial panos and disabled for full spherical or cubical panos
#
progressiveloading=true


# minsize
# - minimum size for multi-resolution levels (for spherical images this is the height)
# - when levels=auto it will automatically generate levels down to this side
# - use 'auto' to find automatically the best for typical fullscreen panoramas
#
minsize=auto


# maxsize / maxcubesize
# - maximum size for multi-resolution levels
# - the input image will be reduced to this size if it's larger
# - use 'auto' to use the full size of the input image
# - maxcubesize = special setting only for cubical images
#
maxsize=auto
maxcubesize=auto


# xml
# - generate a xml file with an <image> tag for the generated pano
# - when enabled then the 'xmltemplate' file will be used to generate the xml
#
xml=true


# xmlpath
# - path of the xml to generate
# - use the placeholder %INPUTPATH% for path of the input images
# - use the placeholder %BASENAME% for the basename of the panorama
#
#xmlpath=%INPUTPATH%/%BASENAME%.xml


# xmltemplate / xmltemplate_additional_file / xmltemplate_view / xmltemplate_hotspot
#
# xmltemplate
# - template file for the xml
# - there are these placeholders in the xml file allowed:
#   [NAME]    - basename of the pano
#   [PREVIEW] - place for the preview tag
#   [IMAGE]   - place for the image tag
#   [SCENES]  - place for the <scene> tags (only when makescenes=true)
#
# xmltemplate_additional_file
# - additional files of the xmltemplate (plugins, lensflares, include files ...)
# - this setting can be used more than once
# - all additional files will be copied to the output folder
# - the paths are made relative to the xml file
#
# xmltemplate_view
# - template for the <view> tag
#
# xmltemplate_hotspot
# - example hotspot template
#


# default.xml
#
# - some standard panoramic controls
# - a changeable mouse cursor (moving, dragging)
#
xmltemplate=templates/xml/default.xml
#xmltemplate_additional_file=templates/xml/skin/defaultskin.xml
#xmltemplate_additional_file=templates/xml/skin/buttons.png
#xmltemplate_additional_file=templates/xml/skin/qtvr-cursors.png
#xmltemplate_additional_file=templates/xml/skin/drag-cursors.png



# xmlimageparameters
# - additional parameters for the xml <image> node,
# - set manual values for "multiresthreshold", "progressive" and "prealign"
# - example:
#     xmlimageparameters=multiresthreshold="-0.2" progressive="false"
#
#xmlimageparameters=


# copyswf
# - copy the krpano.swf to the output folder
#
copyswf=false


# copyiphonejs
# - copy the krpanoiphone.js to the output folder
#
copyiphonejs=false


# copylicense
# - copy the krpano.license to the output folder
# - copy the krpanoiphone.license.js to the output folder
#
copylicense=false


# embedlicenses
# - builds a new .swf file with an embedded krpano.license 
# - builds a new .js file with an embedded the krpano.license.js (if available)
# - when this setting is enabled then the copy* settings don't have an effect anymore
#
embedlicenses=true


# buildembeddedswf
# - build a swf file with embedded license and embedded data (Flash only)
# - it embeds: the license, xml files, skins, preview image and the tiles
# - can be used for single swf files
#
buildembeddedswf=false


# embedorderlookat
# - sort the embedded tiles to start loading with the tiles at the given position 
# - spherical coordinates in 360x180 degree
# - 0/0 = image center
# 
embedorderlookat=0/0


# kprotectclparameters
# - parameter for the kprotectcl tool 
# - only needed for buildembeddedswf=true
#
kprotectclparameters=-nomb -swfsize=900x600


# krpanoswf
# - path to the input krpano.swf file
# - needed when using copyswf=true, renamedswf=true, embedlicenses=true or buildembeddedswf=true
#
krpanoswf=krpano.swf


# krpanolicense
# - path to the krpano.license file
# - needed when using copylicense=true, embedlicenses=true or buildembeddedswf=true
#
krpanolicense=krpano.license


# renamedswf
# - copy and rename the krpano.swf to the same name as the xml file
# - this allows starting the viewer by just clicking the swf file (when a standalone flashplayer is installed)
# - copyswf must be also set to true
# - this setting will be ignored on embedlicenses=true or buildembeddedswf=true
#
renamedswf=false


# renamedlicense
# - rename also the license file
# - copylicense and renamedswf must be also set to true
# - this setting will be ignored on embedlicenses=true or buildembeddedswf=true
#
renamedlicense=true


# html
# - generate a html file where the pano is embedded
# - when enabled then the 'htmltemplate' file will be used to generate the html
# - this is only possible when generating a xml is also enabled
#
html=false


# htmlpath
# - path of the generated html file
# - use the placeholder %INPUTPATH% for path of the input images
# - use the placeholder %BASENAME% for the basename of the panorama
#
htmlpath=%INPUTPATH%/%BASENAME%.html


# htmltemplate / htmltemplate_js / htmltemplate_additional_file
#
# htmltemplate
# - template file for the html
# - there are these placeholders in the html file possible:
#   [XML]  - the path to the generated xml file
#   [NAME] - 'basename' of the pano
#   [SWF]  - path+name to swf file
#   [JS]   - path+name to js file (for embedlicenses=true)
#
# htmltemplate_js
# - javascript embedding script for the html file
# - needed for embedlicenses=true
#
# htmltemplate_additional_file
# - additional files of the htmltemplate
# - can be used more than once
# - this files will be copied to the output folder
# - the paths are made relative to the htmltemplate html file
#


# embedded swfkrpano.js + krpanoJS template
# 
# - for usage with embedlicenses=true
# - only one output javascript file 
# - krpano license embedded (if available)
# - krpanoJS license embedded (if available)
#
htmltemplate=templates/html/swfkrpano_embedded_krpanojs.html
htmltemplate_js=templates/html/swfkrpano_embedded_krpanojs.js



# indexbase
# - numbering start of the tiles
#
indexbase=1


# filter
# - downsample filter for lower multi-resolution levels
# - possible filters:
#   - POINT    = simple point filtering (bad quality)
#   - LINEAR   = linear filtering (better, but still bad quality)
#   - CUBIC    = cubic filtering (soft, some loss of details)
#   - HAMMING  = hamming filter (good, only a little loss of details)
#   - GAUSS    = gaussion filtering (good, only a little loss of details)
#   - MITCHELL = mitchell filtering (good quality for upsampling)
#   - LANCZOS  = windowed sinc filter (best quality, keeps the most details)
#
filter=LANCZOS


# jpegquality
# - jpeg compression quality for the output image tiles
# - possible setting: 1-100 (1=worst quality, smallest file, 100=best quality, biggest file)
#
jpegquality=82


# jpegsubsamp
# - jpeg color subsampling for reducing the jpeg file size
# - more informations: http://en.wikipedia.org/wiki/Chroma_subsampling
# - possible settings:
#   444 = no color subsampling                                  (best quality)
#   422 = horizontal (1/2) color subsampling                    (good compromise)
#   420 = horizontal (1/2) and vertical (1/2) color subsampling (the jpeg default)
#   411 = horizontal (1/4) and vertical (1/2) color subsampling (best compression)
#
jpegsubsamp=422


# jpegoptimize
# - optimize jpeg huffman compression tables
# - should be basically always on
# - but this needs more processing memory
# - if memory usage is critical (when processing very large images and only few working 
#   memory is available) then it should be disabled
#
jpegoptimize=true


# manualjpegcompression
# - manual jpeg compression
# - instead of saving jpegs, lossless tiffs were generated
# - these tiffs can/must be manually converted to jpegs 
#
manualjpegcompression=false


# quiet
# - no console output, process silently
# - only errors are shown
#
quiet=true


# waitkey
# - wait for keypress after processing
#
waitkey=false


# tempdir
# - set the path where temporary files should be stored
# - when not set, the system default will be used
#
#tempdir=

